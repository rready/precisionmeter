@model Meter.Models.Batch

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Batch</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.BatchNo)

        <div class="form-group">
            @Html.LabelFor(model => model.Custid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Custid, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Custid, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BatchDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BatchDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BatchDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Totaldone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Totaldone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Totaldone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.printed, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.printed, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.printed, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BatchStatus, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BatchStatus, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BatchStatus, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@Html.ActionLink("Create New", "Create", null, htmlAttributes: new { @class = "btn btn-info" })
<div class="container">
    <br />
    <div style="width:100%; margin:0 auto;">
        <table id="meters" class="table table-striped table-bordered table-responsive nowrap" width="100%" cellspacing="0" ; style="width:100%">
            <thead>
                <tr>
                    <th>sysid</th>
                    <th>Batchno</th>
                    <th>Custid</th>
                    @*<th>Mfg#</th>
                        <th>Co#</th>
                        <th>conumandmfgnum</th>*@
                    <th>Mfg Size</th>
                    <th>Afp Open</th>
                    <th>Afp Check</th>
                    <th>Afp Error</th>
                    @*<th>Text Message 1</th>
                        <th>Message 1</th>
                        <th>Al Open</th>
                        <th>AL Check</th>
                        <th>Al Error</th>*@
                    <th>PDate</th>
                    @*<th>Text Message 2</th>
                        <th>Messasge 2</th>
                        <th>Pby</th>
                        <th>Rft</th>
                        <th>Irat</th>
                        <th>Irbt</th>
                        <th>Remarks</th>
                        <th>Statue</th>*@
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<!--<div id="GetMeters" class="btn btn-default">Get Meters</div>-->
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<script type="text/javascript">
            //$("#GetMeters").on('click', function () {

            //    var batchid = $("#BatchNo").val();

            //    var mTable = $("#meter").DataTable({
            //        "processing": true, // for show progress bar
            //        //"serverSide": true, // for process server side
            //        "filter": true, // this is for disable filter (search box)
            //        "orderMulti": false, // for disable multiple column at once
            //        "responsive": true,
            //        "deferRender": true,
            //        "order": [[2, "asc"]],
            //        "ajax": {
            //            "url": "/Repairs/GetBatchMeters?batchno=" + batchid,
            //            "type": "POST",
            //            "datatype": "json",
            //            "dataSrc": ''
            //        },
            //        "columnDefs":
            //            [{
            //                "targets": [0],
            //                "visible": false,
            //                "searchable": false,
            //                "select": true,
            //            },
            //            {
            //                "render": function (data, type, row) {
            //                    var rowvalue = row["Pdate"];
            //                    return (moment(rowvalue).format("MM/DD/YYYY"));
            //                },
            //                "targets": 7

            //            }],
            //        "columns": [
            //            { "data": "sysid", "name": "sysid", "autoWidth": true },
            //            { "data": "Batchno", "name": "Batchno", "autoWidth": true },
            //            { "data": "Company", "name": "Company", "autoWidth": true },
            //            //{ "data": "mfgnum", "title": "mfgnum", "name": "mfgnum", "autoWidth": true },
            //            //{ "data": "conum", "title": "conum", "name": "conum", "autoWidth": true },
            //            //{ "data": "conumandmfgnum", "title": "conumandmfgnum", "name": "conumandmfgnum", "autoWidth": true },
            //            { "data": "Mfgsize", "title": "MFG Size", "name": "Mfgsize", "autoWidth": true },
            //            { "data": "Afpopen", "title": "AFP Open", "name": "Afpopen", "autoWidth": true },
            //            { "data": "Afpcheck", "title": "AFP Check", "name": "Afpcheck", "autoWidth": true },
            //            { "data": "Afperro", "title": "AFP Error", "name": "Afperro", "autoWidth": true },
            //            //{ "data": "TextMessage1", "title": "TextMessage", "name": "TextMessage", "autoWidth": true },
            //            //{ "data": "Message1", "title": "Message", "name": "Message1", "autoWidth": true },
            //            //{ "data": "Alopen", "title": "AL Open", "name": "Alopen", "autoWidth": true },
            //            //{ "data": "Alcheck", "title": "AL Check", "name": "Alcheck", "autoWidth": true },
            //            //{ "data": "Alerror", "title": "AL Error", "name": "Alerror", "autoWidth": true },
            //            { "data": "Pdate", "title": "Pdate", "name": "Pdate", "autoWidth": true },
            //            //{ "data": "Textmessage2", "title": "TextMessage2", "name": "Textmessage2", "autoWidth": true },
            //            //{ "data": "Message2", "title": "Message2", "name": "Message2", "autoWidth": true },
            //            //{ "data": "Pby", "title": "Pby", "name": "Pby", "autoWidth": true },
            //            //{ "data": "Rft", "title": "Rft", "name": "Rft", "autoWidth": true },
            //            //{ "data": "Irat", "title": "Irat", "name": "Irat", "autoWidth": true },
            //            //{ "data": "Irbt", "title": "Irbt", "name": "Irbt", "autoWidth": true },
            //            //{ "data": "Remarks", "title": "Remarks", "name": "Remarks", "autoWidth": true },
            //            //{ "data": "Statue", "title": "Statue", "name": "Statue", "autoWidth": true },

            //            {
            //                "render": function (data, type, full, meta) { return '<a class="btn btn-info" href="/Repairs/Edit/' + full.sysid + '">Edit</a>'; }
            //            },
            //            {
            //                "render": function (data, type, full, meta) { return '<a class="btn btn-info" href="/Repairs/Delete/' + full.sysid + '">Delete</a>'; }
            //            }

            //        ],
            //        'rowCallback': function (row, data, index) {
            //            if (data.Afperro < 0) {
            //                $(row).find('td:eq(5)').css('color', 'red');
            //            } else {
            //                $(row).find('td:eq(5)').css('color', '#179b06');
            //            }
            //            //if (data[2].toUpperCase() == 'EE') {
            //            //    $(row).find('td:eq(2)').css('color', 'blue');
            //            //}
            //        }
            //    });
            //});


</script>

