//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Meter.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PrecisionMeterEntities : DbContext
    {
        public PrecisionMeterEntities()
            : base("name=PrecisionMeterEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<CustomerEmail> CustomerEmails { get; set; }
        public virtual DbSet<CustomerNote> CustomerNotes { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<FieldMeter> FieldMeters { get; set; }
        public virtual DbSet<QuoteDetail> QuoteDetails { get; set; }
        public virtual DbSet<QuoteHeader> QuoteHeaders { get; set; }
        public virtual DbSet<ReasonsForTest> ReasonsForTests { get; set; }
        public virtual DbSet<Repair> Repairs { get; set; }
        public virtual DbSet<RootsDetail> RootsDetails { get; set; }
        public virtual DbSet<RootsHeader> RootsHeaders { get; set; }
        public virtual DbSet<Query> Queries { get; set; }
        public virtual DbSet<vw_BatchCustomerLookup> vw_BatchCustomerLookup { get; set; }
        public virtual DbSet<vw_IndexMeters> vw_IndexMeters { get; set; }
    
        public virtual ObjectResult<Nullable<int>> sp_GetMeterBatchTotals(Nullable<int> custid, Nullable<int> batchno)
        {
            var custidParameter = custid.HasValue ?
                new ObjectParameter("Custid", custid) :
                new ObjectParameter("Custid", typeof(int));
    
            var batchnoParameter = batchno.HasValue ?
                new ObjectParameter("Batchno", batchno) :
                new ObjectParameter("Batchno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetMeterBatchTotals", custidParameter, batchnoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GetMeterTotals(Nullable<int> custid)
        {
            var custidParameter = custid.HasValue ?
                new ObjectParameter("Custid", custid) :
                new ObjectParameter("Custid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetMeterTotals", custidParameter);
        }
    }
}
